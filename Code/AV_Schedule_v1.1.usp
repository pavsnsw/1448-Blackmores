/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: TechFM
System Name:
System Number:
Programmer: Adam Kohler
Comments:

This is module that is an On / Off scheduler for a day(s) of the week that writes to a file.

Developed mainly for Mounties club, as club venues have unique problem of Off time being the next day.

So the off time, if an AM, self recognises that this actually the next day without the programmer needing to handle it.

*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "AV Schedule 1.1"
#HINT "AV Sched1.1"
//#DEFINE_CONSTANT 	DEBUG					1 // Debugging
#CATEGORY "16" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
Once tested as completely functional, will write a proper help file.

#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Schedule_Active_Toggle, Set_Active, Reset_Active, On_Active_Toggle, Set_On_Active, Reset_On_Active, Off_Active_Toggle, Set_Off_Active, Reset_Off_Active;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT On_Hour_Up, On_Hour_Down, On_Min_Up, On_Min_Down;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT Off_Hour_Up, Off_Hour_Down, Off_Min_Up, Off_Min_Down;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT Time_Check;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT Week_day[7];
ANALOG_INPUT Warning_Time;
STRING_INPUT sysTOD$[30], FILENAME[100];
// BUFFER_INPUT 

DIGITAL_OUTPUT Schedule_Active_FB, On_Active_FB, Off_Active_FB, On_Trigger, Off_Trigger, Off_Warning, Off_is_Tomorrow;
DIGITAL_OUTPUT FILE_SAVED;
// ANALOG_OUTPUT 
STRING_OUTPUT On_Time$, Off_Time$, Current_Time$;

/*******************************************************************************************
  Structure: EventStore
  Note: Used for storing alarm time to NVRAM 
*******************************************************************************************/

STRUCTURE EventStore
{
   INTEGER s_Hour;
   INTEGER s_HourTemp;
   INTEGER s_Minute;
   INTEGER s_Set;
   INTEGER s_Days;
   STRING  s_Time[20];
   STRING  s_AMPM[2];
};

EventStore S_Event[2];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER sysHours, sysMins, sysSecs;
INTEGER iActive, iDay, iWarn;
INTEGER iHour[8];      				//Alarm Hour
INTEGER iHourTemp[8];				//Alarm Hour Counter
INTEGER iMinute[8];      			//Alarm Minute
INTEGER iDays[8];					//Alarm Days set
INTEGER iActOn[8];					//Alarm is On or off
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING Currentime[15];   				//Current time
STRING EventTime[2][15];   				//Alarm time 
STRING AMPM[8][2];						// AM/PM
STRING PATHFILENAME[200];				// Full path and file name so module can locate it

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function f_readfile()
{
	SIGNED_INTEGER  nFileHandle;						// File Handler
	SIGNED_INTEGER  nTotalBytesRead;					// Total Bytes Read from File
	INTEGER iCount;										// Temp Loop Varable
	FILE_INFO FileInfo;

	For(iCount = 1 to 2)
	{
		S_Event[iCount].s_Hour = 0;
		S_Event[iCount].s_HourTemp = 0;
		S_Event[iCount].s_Minute = 0;
		S_Event[iCount].s_Set = 0;
    	S_Event[iCount].s_Days = 0;
		S_Event[iCount].s_Time = "";
		S_Event[iCount].s_AMPM = "";
	}

	StartFileOperations();

	IF(FindFirst(FILENAME, FileInfo) <> 0)
  	{
		#IF_DEFINED DEBUG
    		PRINT("Could not find file %S\n",FILENAME);
		#ENDIF
		For(iCount = 1 to 2)
		{
			iHour[iCount] = 12;
			iHourTemp[iCount] = 12;
			iMinute[iCount] = 0;
			iDays[iCount] = 0;
			EventTime[iCount] = "12:00 PM";
			AMPM[iCount] = "PM";
			iActOn[iCount] = 0;
		}
    	FindClose();
		EndFileOperations();
  	}
  	ELSE
	{
		#IF_SERIES2
			nFileHandle = FileOpen ( FILENAME , _O_RDONLY );
		#ENDIF
		#IF_SERIES3
			nFileHandle = FileOpen ( FILENAME , _O_RDONLY | _O_BINARY);
        #ENDIF
		#IF_SERIES4
			nFileHandle = FileOpen ( FILENAME , _O_RDONLY | _O_BINARY);
        #ENDIF
		If (nFileHandle >= 0)
		{
			For(iCount = 1 to 2)
			{
   				ReadStructure(nFileHandle, S_Event[iCount], nTotalBytesRead );
   				If( nTotalBytesRead < 0 )
				{
					#IF_DEFINED DEBUG
    	           		PRINT( "Error reading structure.  Error code = %d\n", nTotalBytesRead );
					#ENDIF
				}   			
   				Else
				{
					iHour[iCount] = S_Event[iCount].s_Hour;
					iHourTemp[iCount] = S_Event[iCount].s_HourTemp;
					iMinute[iCount] = S_Event[iCount].s_Minute;
					iDays[iCount] = S_Event[iCount].s_Days;
					EventTime[iCount] = S_Event[iCount].s_Time;
					AMPM[iCount] = S_Event[iCount].s_AMPM;
					iActOn[iCount] = S_Event[iCount].s_Set;
					#IF_DEFINED DEBUG
            			PRINT( "%d: hour = %d, hourtemp = %d, minutes = %d, alarmtime = %s, ampm = %s \n\n", iCount, iHour[iCount], iHourTemp[iCount], iMinute[iCount], EventTime[iCount], AMPM[iCount]);
					#ENDIF				
				}
			}
		}
	}
	EndFileOperations();

	// Signals Out
	if(iActOn[1] = 1 && iActOn[2] = 1)				
		Schedule_Active_FB = 1;
	else
		Schedule_Active_FB = 0;

	On_Active_FB = iActOn[1];
	Off_Active_FB = iActOn[2];
	On_Time$ = EventTime[1];
	Off_Time$ = EventTime[2];

}

/*******************************************************************************************
  Function: f_updatefile
  Note: Adds Stored Variables to NVRAM.
*******************************************************************************************/

Function f_updatefile(integer iSel)
{
	SIGNED_INTEGER  nFileHandle;						// File Handler
	SIGNED_INTEGER  nTotalBytesWritten;					// Total Bytes Written to File
	INTEGER iCount;										// Temp Loop Varable

	FILE_SAVED = 1;

	S_Event[iSel].s_Hour = iHour[iSel];
	S_Event[iSel].s_HourTemp = iHourTemp[iSel];
	S_Event[iSel].s_Minute = iMinute[iSel];
	S_Event[iSel].s_Days = iDays[iSel];
	S_Event[iSel].s_Time = EventTime[iSel];
	S_Event[iSel].s_AMPM = AMPM[iSel];
    S_Event[iSel].s_Set = iActOn[iSel];

	#IF_DEFINED DEBUG
    	PRINT("%d: Hour = %d, HourTemp = %d, Minutes = %d, AlarmTime = %s, AMPM = %s \n\n", iSel, S_Event[iSel].s_Hour, S_Event[iSel].s_HourTemp, S_Event[iSel].s_Minute, S_Event[iSel].s_Time, S_Event[iSel].s_AMPM);
	#ENDIF

	For (iCount = 1 to 2)
	{
		StartFileOperations();
		IF(CheckForNVRAMDisk() = 1)
		{
			#IF_DEFINED DEBUG
    			PRINT("NVRAM Disk found\n");
			#ENDIF
			If (iCount = 1)
			{
				#IF_SERIES2
					nFileHandle = FileOpen(FILENAME, _O_WRONLY | _O_CREAT | _O_TRUNC);
				#ENDIF
                #IF_SERIES3
					nFileHandle = FileOpen(FILENAME, _O_WRONLY | _O_CREAT | _O_TRUNC| _O_BINARY);
				#ENDIF
				#IF_SERIES4
					nFileHandle = FileOpen(FILENAME, _O_WRONLY | _O_CREAT | _O_TRUNC| _O_BINARY);				
				#ENDIF
			}
			ELSE
			{
				#IF_SERIES2
					nFileHandle = FileOpen(FILENAME, _O_WRONLY | _O_APPEND);
				#ENDIF
				#IF_SERIES3
					nFileHandle = FileOpen(FILENAME, _O_WRONLY | _O_APPEND | _O_BINARY );
				#ENDIF
                #IF_SERIES4
					nFileHandle = FileOpen(FILENAME, _O_WRONLY | _O_APPEND | _O_BINARY );
				#ENDIF
			}
			If (nFileHandle >= 0)
			{
   				WriteStructure(nFileHandle, S_Event[iCount], nTotalBytesWritten ); // This writes the current structre to the file

   				If( nTotalBytesWritten < 0 )
				{
					#IF_DEFINED DEBUG
    	            	PRINT( "Error writing structure.  Error code = %d\n", nTotalBytesWritten );
					#ENDIF
      			}
   				Else
				{
					#IF_DEFINED DEBUG
            			PRINT( "Structure written to file correctly.  Total bytes written = %d\n", nTotalBytesWritten );
					#ENDIF       	
					If(FileClose(nFileHandle) <> 0)
					{
						#IF_DEFINED DEBUG
    	                	Print("Error Closing File\n");
						#ENDIF							
					}
				}
			}
			Else
			{
				#IF_DEFINED DEBUG
    	            Print("Error FileOpen. Error code = %d\n", nFileHandle);
				#ENDIF				
			}
    	}
		Else
		{
			PRINT("Error NVRAM Disk Not Found\nPlease initialize NVRAM from console.\nExample: PRO2> NVRAMDISK 128K\n");	
		}
		EndFileOperations();
	}
	FILE_SAVED = 0;
}

function fn_TimeCheck()
{
	sysHours = GetHourNum();
    sysMins = GetMinutesNum();
	sysSecs = GetSecondsNum();
	AMPM[0] = "AM";
	IF(sysHours > 12)
	{
		sysHours = sysHours - 12;
		AMPM[0] = "PM";
	}
	IF(sysHours = 12)
		AMPM[0] = "PM";

	IF(sysHours = 0)
		sysHours = 12;

	Makestring(Currentime,"%d:%02d %s", sysHours, sysMins, AMPM[0]);
	Current_Time$ = Currentime;

    iDay = GetDayOfWeekNum(); // 0 to 6: 0=Sunday, 6=Saturday
    iDay = iDay + 1;
    
	#IF_DEFINED DEBUG
		trace("fn_TimeCheck: %s to %s, On day %d, compared to %d, with Active %d\n", Currentime, EventTime[1], iDay, iDays[1], On_Active_FB);
    #ENDIF

	//if(Currentime = EventTime[1] && S_Event[1].s_Days = iDay && On_Active_FB) // New comparison
    if(Currentime = EventTime[1] && iDays[1] = iDay && On_Active_FB)
	{
    	pulse(500, On_Trigger);
	}
    
    //if(Currentime = EventTime[2] - iWarn && S_Event[2].s_Days = iDay && Off_Active_FB) // New comparison
    if(Currentime = EventTime[2] - iWarn && iDays[2] = iDay && Off_Active_FB)
	{
 		pulse(500, Off_Warning);
	}

    //if(Currentime = EventTime[2] && S_Event[2].s_Days = iDay && Off_Active_FB) // New comparison
    if(Currentime = EventTime[2] && iDays[2] = iDay && Off_Active_FB)
	{
    	pulse(500, Off_Trigger);
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH On_Hour_Up
{
    iHourTemp[1] = iHourTemp[1] + 1;
    IF(iHourTemp[1] >= 24)
		iHourTemp[1] = 0;

	AMPM[1] = "AM";
	IF(iHourTemp[1] > 12)
	{
		iHour[1] = iHourTemp[1] - 12;
		AMPM[1] = "PM";
	}
	Else
		iHour[1] = iHourTemp[1];

	IF(iHourTemp[1] = 12)
		AMPM[1] = "PM";

	IF(iHourTemp[1] = 0)
		iHour[1] = 12;

	Makestring(EventTime[1],"%d:%02d %s", iHour[1], iMinute[1], AMPM[1]);
	On_Time$ = EventTime[1];
	CALL f_updatefile(1);
}

PUSH On_Hour_Down
{
    IF(iHourTemp[1] = 0)
		iHourTemp[1] = 24;
	
	iHourTemp[1] = iHourTemp[1] - 1;
	AMPM[1] = "AM";

	IF(iHourTemp[1] > 12)
	{
		iHour[1] = iHourTemp[1] - 12;
		AMPM[1] = "PM";
	}
	Else
		iHour[1] = iHourTemp[1];

	IF(iHourTemp[1] = 12)
		AMPM[1] = "PM";

	IF(iHourTemp[1] = 0)
		iHour[1] = 12;
	
	Makestring(EventTime[1],"%d:%02d %s", iHour[1], iMinute[1], AMPM[1]);
	On_Time$ = EventTime[1];
	CALL f_updatefile(1);
}

PUSH On_Min_Up
{
	iMinute[1] = iMinute[1] + 15;
	IF(iMinute[1] = 60)
		iMinute[1] = 0;

	Makestring(EventTime[1],"%d:%02d %s", iHour[1], iMinute[1], AMPM[1]);
	On_Time$ = EventTime[1];
	CALL f_updatefile(1);
}

PUSH On_Min_Down
{
	IF(iMinute[1] = 0)
		iMinute[1] = 60;

	iMinute[1] = iMinute[1] - 15;
	Makestring(EventTime[1],"%d:%02d %s", iHour[1], iMinute[1], AMPM[1]);
	On_Time$ = EventTime[1];
	CALL f_updatefile(1);
}

// Off Time

PUSH Off_Hour_Up
{
    iHourTemp[2] = iHourTemp[2] + 1;
    IF(iHourTemp[2] >= 24)
		iHourTemp[2] = 0;

	AMPM[2] = "AM";
	Off_is_Tomorrow = 1;

	IF(iHourTemp[2] > 12)
	{
		iHour[2] = iHourTemp[2] - 12;
		AMPM[2] = "PM";
		Off_is_Tomorrow = 0;
	}
	Else
		iHour[2] = iHourTemp[2];

	IF(iHourTemp[2] = 12)
	{
		AMPM[2] = "PM";
		Off_is_Tomorrow = 0;
	}

	IF(iHourTemp[2] = 0)
		iHour[2] = 12;

	Makestring(EventTime[2],"%d:%02d %s", iHour[2], iMinute[2], AMPM[2]);
	Off_Time$ = EventTime[2];

    // Day adjustment for AM shutdown

	if(AMPM[2] = "AM")
	{
		if(iDays[1] = 7)
			iDays[2] = 1;
		else			
    		iDays[2] = iDays[1] + 1;
	}
	else
	{
		iDays[2] = iDays[1];
	}

	CALL f_updatefile(2);
}

PUSH Off_Hour_Down
{
    IF(iHourTemp[2] = 0)
		iHourTemp[2] = 24;
	
	iHourTemp[2] = iHourTemp[2] - 1;

	AMPM[2] = "AM";
    Off_is_Tomorrow = 1;

	IF(iHourTemp[2] > 12)
	{
		iHour[2] = iHourTemp[2] - 12;
		AMPM[2] = "PM";
        Off_is_Tomorrow = 0;
	}
	Else
		iHour[2] = iHourTemp[2];

	IF(iHourTemp[2] = 12)
	{
		AMPM[2] = "PM";
        Off_is_Tomorrow = 0;
	}

	IF(iHourTemp[2] = 0)
		iHour[2] = 12;
	
	Makestring(EventTime[2],"%d:%02d %s", iHour[2], iMinute[2], AMPM[2]);
	Off_Time$ = EventTime[2];
    
	// Day wrap around for AM shutdown
	if(AMPM[2] = "AM")
	{
		if(iDays[1] = 7)
			iDays[2] = 1;
		else			
    		iDays[2] = iDays[1] + 1;
	}
	else
	{
		iDays[2] = iDays[1];
	}

	CALL f_updatefile(2);
}

PUSH Off_Min_Up
{
	iMinute[2] = iMinute[2] + 15;
	IF(iMinute[2] = 60)
		iMinute[2] = 0;

	Makestring(EventTime[2],"%d:%02d %s", iHour[2], iMinute[2], AMPM[2]);
	Off_Time$ = EventTime[2];
	CALL f_updatefile(2);
}

PUSH Off_Min_Down
{
	IF(iMinute[2] = 0)
		iMinute[2] = 60;

	iMinute[2] = iMinute[2] - 15;
	Makestring(EventTime[2],"%d:%02d %s", iHour[2], iMinute[2], AMPM[2]);
	Off_Time$ = EventTime[2];
	CALL f_updatefile(2);
}

// Week of day

PUSH Week_day
{
	integer idx;
	idx = getlastmodifiedarrayindex();
    iDays[1] = idx;

	if(AMPM[2] = "AM")
	{
		if(idx = 7)
			iDays[2] = 1;
		else			
    		iDays[2] = idx + 1;
	}
	else
	{
		iDays[2] = idx;
	}
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

PUSH Time_Check
{
	call fn_TimeCheck();
}

CHANGE Warning_Time
{
	iWarn = Warning_Time;	
}
 

PUSH Set_Active 
{
	iActOn[1] = 1;
	iActOn[2] = 1;
	Schedule_Active_FB = 1;
	On_Active_FB = iActOn[1];
	Off_Active_FB = iActOn[2];
	CALL f_updatefile(1);
	CALL f_updatefile(2);
}

PUSH Reset_Active
{
	iActOn[1] = 0;
	iActOn[2] = 0;
	Schedule_Active_FB = 0;
	On_Active_FB = iActOn[1];
	Off_Active_FB = iActOn[2];
	CALL f_updatefile(1);
	CALL f_updatefile(2);
}

PUSH Set_On_Active
{
	iActOn[1] = 1;
	On_Active_FB = iActOn[1];
	CALL f_updatefile(1);
}

PUSH Reset_On_Active
{
	iActOn[1] = 0;
	On_Active_FB = iActOn[1];
	CALL f_updatefile(1);
}

PUSH Set_Off_Active
{
	iActOn[2] = 1;
	Off_Active_FB = iActOn[2];
	CALL f_updatefile(2);
}

PUSH Reset_Off_Active
{
	iActOn[2] = 0;
	Off_Active_FB = iActOn[2];
	CALL f_updatefile(2);
}

PUSH On_Active_Toggle
{
	if(iActOn[1] = 1)	
		iActOn[1] = 0;
	else
		iActOn[1] = 1;
    
	On_Active_FB = iActOn[1];

	CALL f_updatefile(1);
}

PUSH Off_Active_Toggle
{
	if(iActOn[2] = 1)	
		iActOn[2] = 0;
	else
		iActOn[2] = 1;

    Off_Active_FB = iActOn[2];

	CALL f_updatefile(2);
}

PUSH Schedule_Active_Toggle
{
	if(iActOn[1] = 1)
	{
    	iActOn[1] = 0;
		iActOn[2] = 0;
	}
	else
	{
    	iActOn[1] = 1;
		iActOn[2] = 1;
	}
    
	if(iActOn[1] = 1 && iActOn[2] = 1)				
		Schedule_Active_FB = 1;
	else
		Schedule_Active_FB = 0;

	On_Active_FB = iActOn[1];
	Off_Active_FB = iActOn[2];

	f_updatefile(1);
	wait(50)
	{
		f_updatefile(2);
	}
}

THREADSAFE CHANGE sysTOD$
{
	if(GetSecondsNum() = 0) // On the minute
		fn_TimeCheck();
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
    INTEGER iCount;
	iWarn = 0;
    WaitForInitializationComplete();
	CALL f_readfile();
	//ProcessLogic();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


