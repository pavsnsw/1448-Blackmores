/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: All AV
System Name: CBus Control
System Number:
Programmer: Luke Johnston /JW
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFINE_CONSTANT MAX_LIGHTS	3
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs,and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT Lights_Preset_1_bt,Lights_Preset_2_bt,Lights_Preset_3_bt,Lights_Preset_4_bt,Lights_Preset_5_bt,Lights_Preset_6_bt,Lights_1_up_bt,Lights_2_up_bt,Lights_3_up_bt,Lights_1_dn_bt,Lights_2_dn_bt,Lights_3_dn_bt,Lights_1_toggle,Lights_2_toggle,Lights_3_toggle;

// ANALOG_INPUT Join_Mode;
STRING_INPUT From_Cbus[100];
// BUFFER_INPUT 

 DIGITAL_OUTPUT Light_toggle_1_fb,Light_toggle_2_fb,Light_toggle_3_fb;
 ANALOG_OUTPUT Light_Level_1,Light_Level_2,Light_Level_3;
 STRING_OUTPUT To_CBus;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
 STRING_PARAMETER _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,Application[2],CBusAddresses[7][2];
INTEGER_PARAMETER Preset1Levels[7],Preset2Levels[7],Preset3Levels[7],Preset4Levels[7],Preset5Levels[7],Preset6Levels[7];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/






/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/



/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER cPresetLevel[6][7],nSendString;
INTEGER nLightLevel[7];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
 STRING strHeader[10],strMiddle[10],strFooter[10],cPresetStrings[6][30];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function fnSetup()
{
	strHeader = "\x5C05";
	strMiddle = "0002";
	strFooter = "x\x0D";

	cPresetLevel[1][1] = 0xFF;
	cPresetLevel[1][2] = 0xFF;
	cPresetLevel[1][3] = 0xFF;
	cPresetLevel[1][4] = 0xFF;
	cPresetLevel[1][5] = 0xFF;
	cPresetLevel[1][6] = 0xFF;
	cPresetLevel[1][7] = 0xFF;

	cPresetLevel[2][1] = 0x9B;
	cPresetLevel[2][2] = 0x9B;
	cPresetLevel[2][3] = 0x9B;
	cPresetLevel[2][4] = 0x9B;
	cPresetLevel[2][5] = 0x9B;
	cPresetLevel[2][6] = 0x9B;
	cPresetLevel[2][7] = 0x9B;

	cPresetLevel[3][1] = 0x64;
	cPresetLevel[3][2] = 0x64;
	cPresetLevel[3][3] = 0x64;
	cPresetLevel[3][4] = 0x64;
	cPresetLevel[3][5] = 0x64;
	cPresetLevel[3][6] = 0x64;
	cPresetLevel[3][7] = 0x64;

	cPresetLevel[4][1] = 0x00;
	cPresetLevel[4][2] = 0x00;
	cPresetLevel[4][3] = 0x00;
	cPresetLevel[4][4] = 0x00;
	cPresetLevel[4][5] = 0x00;
	cPresetLevel[4][6] = 0x00;
	cPresetLevel[4][7] = 0x00;

	cPresetLevel[5][1] = 0x00;
	cPresetLevel[5][2] = 0xFF;
	cPresetLevel[5][3] = 0xFF;
	cPresetLevel[5][4] = 0xFF;
	cPresetLevel[5][5] = 0xFF;
	cPresetLevel[5][6] = 0xFF;
	cPresetLevel[5][7] = 0xFF;

	cPresetLevel[6][1] = 0x00;
	cPresetLevel[6][2] = 0xFF;
	cPresetLevel[6][3] = 0xFF;
	cPresetLevel[6][4] = 0xFF;
	cPresetLevel[6][5] = 0xFF;
	cPresetLevel[6][6] = 0xFF;
	cPresetLevel[6][7] = 0xFF;

}

Function fnDoFedback()
{
	Light_Level_1 = nLightLevel[1];
	Light_Level_2 = nLightLevel[2];	
	Light_Level_3 = nLightLevel[3];	

	if (nLightLevel[1]) Light_toggle_1_fb = 1;
	else Light_toggle_1_fb = 0;

 	if (nLightLevel[2]) Light_toggle_2_fb = 1;
	else Light_toggle_2_fb = 0;

	if (nLightLevel[3]) Light_toggle_3_fb = 1;
	else Light_toggle_3_fb = 0;
}


/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Lights_Preset_1_bt
{
	integer x;
	integer GetLast;
	GetLast = GetLastModifiedArrayIndex();
	for(x=1 to MAX_LIGHTS)
	{
		if(CbusAddresses[x] <> "")
		{
			nLightLevel[x] = Preset1Levels[x];
			if(Preset1Levels[x] < 10)
			{
				makestring(To_CBus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],"0",itohex(Preset1Levels[x]),strFooter);	
			}
			else
			{
				makestring(To_CBus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],itohex(Preset1Levels[x]),strFooter);	
			}
			DELAY (20);
		}
	}
    fnDoFedback();
}
PUSH Lights_Preset_2_bt
{
	integer x;
	integer GetLast;
	GetLast = GetLastModifiedArrayIndex();
	for(x=1 to MAX_LIGHTS)
	{
		if(CbusAddresses[x] <> "")
		{
			nLightLevel[x] = Preset2Levels[x];
			if(Preset2Levels[x] < 10)
			{
				makestring(To_CBus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],"0",itohex(Preset2Levels[x]),strFooter);	
			}
			else
			{
				makestring(To_CBus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],itohex(Preset2Levels[x]),strFooter);	
			}
			DELAY (20);
		}
	}
	fnDoFedback();		
}
PUSH Lights_Preset_3_bt
{
	integer x;
	integer GetLast;
	GetLast = GetLastModifiedArrayIndex();
	for(x=1 to MAX_LIGHTS)
	{
		if(CbusAddresses[x] <> "")
		{
			nLightLevel[x] = Preset3Levels[x];
			if(Preset3Levels[x] < 10)
			{
				makestring(To_CBus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],"0",itohex(Preset3Levels[x]),strFooter);	
			}
			else
			{
				makestring(To_CBus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],itohex(Preset3Levels[x]),strFooter);	
			}
			DELAY (20);
		}
	}
	fnDoFedback();		
}
PUSH Lights_Preset_4_bt
{
	integer x;
	integer GetLast;
	GetLast = GetLastModifiedArrayIndex();
	for(x=1 to MAX_LIGHTS)
	{
		if(CbusAddresses[x] <> "")
		{
			nLightLevel[x] = Preset4Levels[x];
			if(Preset4Levels[x] < 10)
			{
				makestring(To_CBus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],"0",itohex(Preset4Levels[x]),strFooter);	
			}
			else
			{
				makestring(To_CBus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],itohex(Preset4Levels[x]),strFooter);	
			}
			DELAY (20);
		}
	}
	fnDoFedback();		
}
PUSH Lights_Preset_5_bt
{
	integer x;
	integer GetLast;
	GetLast = GetLastModifiedArrayIndex();
	for(x=1 to MAX_LIGHTS)
	{
		if(CbusAddresses[x] <> "")
		{
			nLightLevel[x] = Preset5Levels[x];
			if(Preset5Levels[x] < 10)
			{
				makestring(To_CBus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],"0",itohex(Preset5Levels[x]),strFooter);	
			}
			else
			{
				makestring(To_CBus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],itohex(Preset5Levels[x]),strFooter);	
			}
			DELAY (20);
		}
	}
	fnDoFedback();		
}
PUSH Lights_Preset_6_bt
{
	integer x;
	integer GetLast;
	GetLast = GetLastModifiedArrayIndex();
	for(x=1 to MAX_LIGHTS)
	{
		if(CbusAddresses[x] <> "")
		{
			nLightLevel[x] = Preset6Levels[x];
			if(Preset6Levels[x] < 10)
			{
				makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],"0",itohex(Preset6Levels[x]),strFooter);	
			}
			else
			{
				makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[x],itohex(Preset6Levels[x]),strFooter);	
			}
			DELAY (20);
		}
//		if(x = 6)
//		{
//			if(len(cPresetStrings[1]))
//			{
//				makestring(To_Cbus,"%s",cPresetStrings[x]);
//				nSendString = 2;	
//			}
//		}
	}
	fnDoFedback();		
}



PUSH Lights_1_up_bt
{
	nLightLevel[1] = nLightLevel[1] + 20;
	if (nLightLevel[1] > 255) nLightLevel[1] = 255;

	if(nLightLevel[1] < 10)
	{
		makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[1],"0",itohex(nLightLevel[1]),strFooter);	
	}
	else
	{
		makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[1],itohex(nLightLevel[1]),strFooter);	
	}
	//Light_Level_1 = nLightLevel[1];
	fnDoFedback();
}

PUSH Lights_2_up_bt
{
	nLightLevel[2] = nLightLevel[2] + 20;
	if (nLightLevel[2] > 255) nLightLevel[2] = 255;

	if(nLightLevel[2] < 10)
	{
		makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[2],"0",itohex(nLightLevel[2]),strFooter);	
	}
	else
	{
		makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[2],itohex(nLightLevel[2]),strFooter);	
	}
	//Light_Level_2 = nLightLevel[2];
	fnDoFedback();
}

PUSH Lights_3_up_bt
{
	nLightLevel[3] = nLightLevel[3] + 20;
	if (nLightLevel[3] > 255) nLightLevel[3] = 255;

	if(nLightLevel[3] < 10)
	{
		makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[3],"0",itohex(nLightLevel[3]),strFooter);	
	}
	else
	{
		makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[3],itohex(nLightLevel[3]),strFooter);	
	}
	//Light_Level_2 = nLightLevel[2];
	fnDoFedback();
}
 
PUSH Lights_1_dn_bt
{
	if (nLightLevel[1] <= 20) nLightLevel[1] = 0;
    else nLightLevel[1] = nLightLevel[1] - 20;

	if(nLightLevel[1] < 10)
	{
		makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[1],"0",itohex(nLightLevel[1]),strFooter);	
	}
	else
	{
		makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[1],itohex(nLightLevel[1]),strFooter);	
	}
	//Light_Level_1 = nLightLevel[1];
	fnDoFedback();
}

PUSH Lights_2_dn_bt
{
	if (nLightLevel[2] <= 20) nLightLevel[2] = 0;
    else nLightLevel[2] = nLightLevel[2] - 20;

	if(nLightLevel[2] < 10)
	{
		makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[2],"0",itohex(nLightLevel[2]),strFooter);	
	}
	else
	{
		makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[2],itohex(nLightLevel[2]),strFooter);	
	}
	//Light_Level_2 = nLightLevel[2];
	fnDoFedback();
}

PUSH Lights_3_dn_bt
{
	if (nLightLevel[3] <= 20) nLightLevel[3] = 0;
    else nLightLevel[3] = nLightLevel[3] - 20;

	if(nLightLevel[3] < 10)
	{
		makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[3],"0",itohex(nLightLevel[3]),strFooter);	
	}
	else
	{
		makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[3],itohex(nLightLevel[3]),strFooter);	
	}
	//Light_Level_3 = nLightLevel[3];
	fnDoFedback();
}
   
PUSH Lights_1_toggle
{
	if (nLightLevel[1]) nLightLevel[1] = 0;
    else nLightLevel[1] = 255;
 	if(nLightLevel[1] < 10)
	{
		makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[1],"0",itohex(nLightLevel[1]),strFooter);	
	}
	else
	{
		makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[1],itohex(nLightLevel[1]),strFooter);	
	}
	//Light_Level_3 = nLightLevel[3];
	fnDoFedback();
}

PUSH Lights_2_toggle
{
	if (nLightLevel[2]) nLightLevel[2] = 0;
    else nLightLevel[2] = 255;
 	if(nLightLevel[2] < 10)
	{
		makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[2],"0",itohex(nLightLevel[2]),strFooter);	
	}
	else
	{
		makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[2],itohex(nLightLevel[2]),strFooter);	
	}
	//Light_Level_3 = nLightLevel[3];
	fnDoFedback();
}


PUSH Lights_3_toggle
{
	if (nLightLevel[3]) nLightLevel[3] = 0;
    else nLightLevel[3] = 255;
 	if(nLightLevel[3] < 10)
	{
		makestring(To_Cbus,"%s%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[3],"0",itohex(nLightLevel[3]),strFooter);	
	}
	else
	{
		makestring(To_Cbus,"%s%s%s%s%s%s",strHeader,Application,strMiddle,CbusAddresses[3],itohex(nLightLevel[3]),strFooter);	
	}
	//Light_Level_3 = nLightLevel[3];
	fnDoFedback();
}


//CHANGE From_Cbus
//{
//	if(find("x.",From_Cbus))
//	{
//		if(len(cPresetStrings[nSendString]))
//		{
//			makestring(To_Cbus,"%s",cPresetStrings[nSendString]);
//			nSendString = nSendString+1;	
//		}
//	}
//}			
/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/
/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

     WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.

		fnSetup();
}


