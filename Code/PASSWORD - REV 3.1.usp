/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Hackers Anon
System Name:
System Number:
Programmer: David Ashley helped, but The Meat made it magic
Comments: 
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN

This is a hacked up password module, has 4 access codes with 4 different output signals.
Password is compared at each button press now, so the enter is not required.

It performs the same task anyway still though.

Now revised so that it searches for the code sequence in the passcode entered,
so if type in values before hand, it wont matter.

Now added override for the auto check future to be disabled.

#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT KEY1,KEY2,KEY3,KEY4,KEY5,KEY6,KEY7,KEY8,KEY9,KEY0,KEYSTAR,KEYHASH,KEYDOT,KEYPAUSE,CLEAR,BACKSPACE,ENTER,_skip_,AUTO_CHECK_EN;

// ANALOG_INPUT
STRING_INPUT code[10],code2[10],code3[10],admin_code[15];
// BUFFER_INPUT 

DIGITAL_OUTPUT Code1Good,Code2Good,Code3Good,ADMIN,ERROR;
// ANALOG_OUTPUT 
STRING_OUTPUT Spasscode, Spasscode_stars;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER iAutoEn;
STRING passcode[15];

function stars()
{
	switch (len (passcode))
	{
		case (0):  {Spasscode_stars = "";}
		case (1):  {Spasscode_stars = "*";}
		case (2):  {Spasscode_stars = "**";}
		case (3):  {Spasscode_stars = "***";}
		case (4):  {Spasscode_stars = "****";}
		case (5):  {Spasscode_stars = "*****";}
		case (6):  {Spasscode_stars = "******";}
		case (7):  {Spasscode_stars = "*******";}
		case (8):  {Spasscode_stars = "********";}
		case (9):  {Spasscode_stars = "*********";}
		case (10): {Spasscode_stars = "**********";}
		case (11): {Spasscode_stars = "***********";}
		case (12): {Spasscode_stars = "************";}
		case (13): {Spasscode_stars = "*************";}
		case (14): {Spasscode_stars = "**************";}
		case (15): {Spasscode_stars = "***************";}
	}
}
 
Function CheckPasscode()
{
	 //IF (passcode = code) // input code matches generated code
	if(find(code,passcode,1))
	{
		pulse (100, Code1Good);
	}
     //ELSE IF (passcode = code2)
    else if(find(code2, passcode,1))
	{
		pulse (100, Code2Good);
	}	

	 //ELSE IF (passcode = code3)
	else if(find(code3,passcode,1))
	{
		pulse (100, Code3Good);
	}	

	 //ELSE IF (passcode = admin_code)
	else if(find(admin_code,passcode,1))
	{
		pulse (100, ADMIN);
	}	
	else 
	{
		if(iAutoEn = 0)
			pulse (100, error);
	}
	
	//passcode = ""; // clear passcode
	//Spasscode = "";
	call stars();
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH KEY1
{
	passcode = passcode + "1";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}  

PUSH KEY2
{
	passcode = passcode + "2";
	Spasscode = passcode; 
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();                
}                           
	
PUSH KEY3
{
	passcode = passcode + "3";
	Spasscode = passcode;                  
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}                           
	
PUSH KEY4
{
	passcode = passcode + "4";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}                           
	
PUSH KEY5
{
	passcode = passcode + "5";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}                           
	
PUSH KEY6
{
	passcode = passcode + "6";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}                           
	
PUSH KEY7
{
	passcode = passcode + "7";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}                           
	
PUSH KEY8
{
	passcode = passcode + "8";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}
                                
PUSH KEY9
{
	passcode = passcode + "9";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}                           
	
PUSH KEY0
{
	passcode = passcode + "0";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}  
	
PUSH KEYSTAR
{
	passcode = passcode + "*";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
} 	 
	
PUSH KEYHASH
{
	passcode = passcode + "#";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}   
	
PUSH KEYDOT
{
	passcode = passcode + ".";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
}                                     
	

PUSH KEYPAUSE
{
	passcode = passcode + ",";
	Spasscode = passcode;
	call stars();
	if(iAutoEn = 1)
		call CheckPasscode();
} 	                         
	
PUSH CLEAR
{
	passcode = "";
	Spasscode = passcode;
	call stars();
}      
		   
	
PUSH BACKSPACE
{
	passcode = LEFT (passcode, (LEN (passcode) - 1));
	Spasscode = passcode;
	call stars();
}  
	
PUSH ENTER
{
	call CheckPasscode();	
}

PUSH AUTO_CHECK_EN
{
	iAutoEn = 1;
}

RELEASE AUTO_CHECK_EN
{
	iAutoEn = 0;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	passcode = "";
	Spasscode = "";
	Spasscode_stars = "";
	iAutoEn = 0;
	
	WaitForInitializationComplete();

}


